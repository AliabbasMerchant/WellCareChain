package com.example.max.wellcare;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;



/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class WellCareChain extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NEWLAB = "newLab";

    public static final String FUNC_NOOFDATAREQUIREMENTS = "noOfDataRequirements";

    public static final String FUNC_GETPATIENTID = "getPatientId";

    public static final String FUNC_NOOFDOCTORS = "noOfDoctors";

    public static final String FUNC_GETPATHOLOGYID = "getPathologyId";

    public static final String FUNC_NOOFDATA = "noOfData";

    public static final String FUNC_GETPATHOLOGYEMAIL = "getPathologyEmail";

    public static final String FUNC_ALERTDATAREQUIREMENT = "alertDataRequirement";

    public static final String FUNC_LABS = "labs";

    public static final String FUNC_GETBOUNTY = "getBounty";

    public static final String FUNC_DOCTORS = "doctors";

    public static final String FUNC_PAYTOCHEMIST = "payToChemist";

    public static final String FUNC_NOOFPATIENTS = "noOfPatients";

    public static final String FUNC_GETDOCTOREMAIL = "getDoctorEmail";

    public static final String FUNC_PATIENTS = "patients";

    public static final String FUNC_NEWCHEMIST = "newChemist";

    public static final String FUNC_GETLABEMAIL = "getLabEmail";

    public static final String FUNC_NOOFLABS = "noOfLabs";

    public static final String FUNC_NEWPATHOLOGY = "newPathology";

    public static final String FUNC_NOOFPATHOLOGIES = "noOfPathologies";

    public static final String FUNC_GETDOCTORID = "getDoctorId";

    public static final String FUNC_GETLABID = "getLabId";

    public static final String FUNC_PAYTODOCTOR = "payToDoctor";

    public static final String FUNC_DATAREQUIREMENTS = "dataRequirements";

    public static final String FUNC_GETCHEMISTID = "getChemistId";

    public static final String FUNC_NEWDOCTOR = "newDoctor";

    public static final String FUNC_NOOFCHEMISTS = "noOfChemists";

    public static final String FUNC_PAYTOPATHOLOGY = "payToPathology";

    public static final String FUNC_CHEMISTS = "chemists";

    public static final String FUNC_DATA = "data";

    public static final String FUNC_GETCHEMISTEMAIL = "getChemistEmail";

    public static final String FUNC_PATHOLOGIES = "pathologies";

    public static final String FUNC_NEWPATIENT = "newPatient";

    public static final Event NEWDOCTOR_EVENT = new Event("NewDoctor",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NEWCHEMIST_EVENT = new Event("NewChemist",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NEWLAB_EVENT = new Event("NewLab",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NEWPATHOLOGY_EVENT = new Event("NewPathology",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NEWDATAREQUIREMENT_EVENT = new Event("newDataRequirement",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected WellCareChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WellCareChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WellCareChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WellCareChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> newLab(String _name, String _email, String _license, String _details) {
        final Function function = new Function(
                FUNC_NEWLAB,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Utf8String(_license),
                        new org.web3j.abi.datatypes.Utf8String(_details)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> noOfDataRequirements() {
        final Function function = new Function(FUNC_NOOFDATAREQUIREMENTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPatientId(String addr) {
        final Function function = new Function(FUNC_GETPATIENTID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> noOfDoctors() {
        final Function function = new Function(FUNC_NOOFDOCTORS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPathologyId(String addr) {
        final Function function = new Function(FUNC_GETPATHOLOGYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> noOfData() {
        final Function function = new Function(FUNC_NOOFDATA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getPathologyEmail(BigInteger pathologyId) {
        final Function function = new Function(FUNC_GETPATHOLOGYEMAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pathologyId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> alertDataRequirement(String _message, BigInteger _number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ALERTDATAREQUIREMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_message),
                        new org.web3j.abi.datatypes.generated.Uint256(_number)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> labs(BigInteger param0) {
        final Function function = new Function(FUNC_LABS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getBounty(BigInteger _requirementId, String _url) {
        final Function function = new Function(
                FUNC_GETBOUNTY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_requirementId),
                        new org.web3j.abi.datatypes.Utf8String(_url)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, String>> doctors(BigInteger param0) {
        final Function function = new Function(FUNC_DOCTORS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, String>>(
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> payToChemist(BigInteger _patientId, BigInteger _chemistId, BigInteger _fees, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYTOCHEMIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_patientId),
                        new org.web3j.abi.datatypes.generated.Uint256(_chemistId),
                        new org.web3j.abi.datatypes.generated.Uint256(_fees)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> noOfPatients() {
        final Function function = new Function(FUNC_NOOFPATIENTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getDoctorEmail(BigInteger doctorId) {
        final Function function = new Function(FUNC_GETDOCTOREMAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(doctorId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, String, String, Boolean>> patients(BigInteger param0) {
        final Function function = new Function(FUNC_PATIENTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, String, String, Boolean>>(
                new Callable<Tuple8<String, String, String, String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> newChemist(String _name, String _email, String _license, String _physicalAdd) {
        final Function function = new Function(
                FUNC_NEWCHEMIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Utf8String(_license),
                        new org.web3j.abi.datatypes.Utf8String(_physicalAdd)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getLabEmail(BigInteger labId) {
        final Function function = new Function(FUNC_GETLABEMAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(labId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> noOfLabs() {
        final Function function = new Function(FUNC_NOOFLABS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> newPathology(String _name, String _email, String _license, String _physicalAdd) {
        final Function function = new Function(
                FUNC_NEWPATHOLOGY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Utf8String(_license),
                        new org.web3j.abi.datatypes.Utf8String(_physicalAdd)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> noOfPathologies() {
        final Function function = new Function(FUNC_NOOFPATHOLOGIES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDoctorId(String addr) {
        final Function function = new Function(FUNC_GETDOCTORID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getLabId(String addr) {
        final Function function = new Function(FUNC_GETLABID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> payToDoctor(BigInteger _patientId, BigInteger _doctorId, BigInteger _fees, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYTODOCTOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_patientId),
                        new org.web3j.abi.datatypes.generated.Uint256(_doctorId),
                        new org.web3j.abi.datatypes.generated.Uint256(_fees)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> dataRequirements(BigInteger param0) {
        final Function function = new Function(FUNC_DATAREQUIREMENTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getChemistId(String addr) {
        final Function function = new Function(FUNC_GETCHEMISTID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> newDoctor(String _name, String _email, String _license, String _physicalAdd, String _specialization) {
        final Function function = new Function(
                FUNC_NEWDOCTOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Utf8String(_license),
                        new org.web3j.abi.datatypes.Utf8String(_physicalAdd),
                        new org.web3j.abi.datatypes.Utf8String(_specialization)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> noOfChemists() {
        final Function function = new Function(FUNC_NOOFCHEMISTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> payToPathology(BigInteger _patientId, BigInteger _pathologyId, BigInteger _fees, String info, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYTOPATHOLOGY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_patientId),
                        new org.web3j.abi.datatypes.generated.Uint256(_pathologyId),
                        new org.web3j.abi.datatypes.generated.Uint256(_fees),
                        new org.web3j.abi.datatypes.Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> chemists(BigInteger param0) {
        final Function function = new Function(FUNC_CHEMISTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, String>> data(BigInteger param0) {
        final Function function = new Function(FUNC_DATA,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, String>>(
                new Callable<Tuple3<BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> getChemistEmail(BigInteger chemistId) {
        final Function function = new Function(FUNC_GETCHEMISTEMAIL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(chemistId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> pathologies(BigInteger param0) {
        final Function function = new Function(FUNC_PATHOLOGIES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> newPatient(String _name, String _email, String _driveURL, String _presURL, String _infoURL, String _reportsURL) {
        final Function function = new Function(
                FUNC_NEWPATIENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_email),
                        new org.web3j.abi.datatypes.Utf8String(_driveURL),
                        new org.web3j.abi.datatypes.Utf8String(_presURL),
                        new org.web3j.abi.datatypes.Utf8String(_infoURL),
                        new org.web3j.abi.datatypes.Utf8String(_reportsURL)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<NewDoctorEventResponse> getNewDoctorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDOCTOR_EVENT, transactionReceipt);
        ArrayList<NewDoctorEventResponse> responses = new ArrayList<NewDoctorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDoctorEventResponse typedResponse = new NewDoctorEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewDoctorEventResponse> newDoctorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewDoctorEventResponse>() {
            @Override
            public NewDoctorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDOCTOR_EVENT, log);
                NewDoctorEventResponse typedResponse = new NewDoctorEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<NewDoctorEventResponse> newDoctorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDOCTOR_EVENT));
        return newDoctorEventFlowable(filter);
    }

    public List<NewChemistEventResponse> getNewChemistEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCHEMIST_EVENT, transactionReceipt);
        ArrayList<NewChemistEventResponse> responses = new ArrayList<NewChemistEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewChemistEventResponse typedResponse = new NewChemistEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewChemistEventResponse> newChemistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewChemistEventResponse>() {
            @Override
            public NewChemistEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWCHEMIST_EVENT, log);
                NewChemistEventResponse typedResponse = new NewChemistEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<NewChemistEventResponse> newChemistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCHEMIST_EVENT));
        return newChemistEventFlowable(filter);
    }

    public List<NewLabEventResponse> getNewLabEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWLAB_EVENT, transactionReceipt);
        ArrayList<NewLabEventResponse> responses = new ArrayList<NewLabEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewLabEventResponse typedResponse = new NewLabEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewLabEventResponse> newLabEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewLabEventResponse>() {
            @Override
            public NewLabEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWLAB_EVENT, log);
                NewLabEventResponse typedResponse = new NewLabEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<NewLabEventResponse> newLabEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWLAB_EVENT));
        return newLabEventFlowable(filter);
    }

    public List<NewPathologyEventResponse> getNewPathologyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPATHOLOGY_EVENT, transactionReceipt);
        ArrayList<NewPathologyEventResponse> responses = new ArrayList<NewPathologyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPathologyEventResponse typedResponse = new NewPathologyEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPathologyEventResponse> newPathologyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewPathologyEventResponse>() {
            @Override
            public NewPathologyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPATHOLOGY_EVENT, log);
                NewPathologyEventResponse typedResponse = new NewPathologyEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<NewPathologyEventResponse> newPathologyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPATHOLOGY_EVENT));
        return newPathologyEventFlowable(filter);
    }

    public List<NewDataRequirementEventResponse> getNewDataRequirementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDATAREQUIREMENT_EVENT, transactionReceipt);
        ArrayList<NewDataRequirementEventResponse> responses = new ArrayList<NewDataRequirementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDataRequirementEventResponse typedResponse = new NewDataRequirementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.labId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bountyForEach = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewDataRequirementEventResponse> newDataRequirementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewDataRequirementEventResponse>() {
            @Override
            public NewDataRequirementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDATAREQUIREMENT_EVENT, log);
                NewDataRequirementEventResponse typedResponse = new NewDataRequirementEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.labId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.bountyForEach = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewDataRequirementEventResponse> newDataRequirementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDATAREQUIREMENT_EVENT));
        return newDataRequirementEventFlowable(filter);
    }

    @Deprecated
    public static WellCareChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WellCareChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WellCareChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WellCareChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WellCareChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WellCareChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WellCareChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WellCareChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WellCareChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WellCareChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WellCareChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WellCareChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<WellCareChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WellCareChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WellCareChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WellCareChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class NewDoctorEventResponse {
        public Log log;
    }

    public static class NewChemistEventResponse {
        public Log log;
    }

    public static class NewLabEventResponse {
        public Log log;
    }

    public static class NewPathologyEventResponse {
        public Log log;
    }

    public static class NewDataRequirementEventResponse {
        public Log log;

        public String message;

        public BigInteger labId;

        public BigInteger bountyForEach;
    }
}
